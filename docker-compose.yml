services:
  coolify:
    container_name: coolify
    image: coollabsio/coolify:latest
    ports:
      - "8000:8080"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - coolify-db-data:/app/db
      - coolify-backups:/app/backups
      - coolify-logs:/app/logs
    depends_on:
      coolify-db:
        condition: service_healthy
      coolify-redis:
        condition: service_healthy
    environment:
      # Database configuration
      - DB_CONNECTION=pgsql
      - DB_HOST=coolify-db
      - DB_PORT=5432
      - DB_USER=coolify
      - DB_PASSWORD=password
      - DB_DATABASE=coolify
      
      # Redis configuration
      - REDIS_HOST=coolify-redis
      - REDIS_PORT=6379
      
      # Application settings
      - APP_KEY=base64:KE5NZ2r8OYGN+s+aFOT4afvBxvj6/K4jWPrRLdP1M9A=
      - APP_URL=http://localhost:8000
      - COOLIFY_APP_PORT=8080
      - COOLIFY_SECRET_KEY=somethingsecret
      - SKIP_DYNAMIC_CONFIGURATION=true
      - RUN_MIGRATIONS=true
      - FORCE_MIGRATION=true

  coolify-db:
    container_name: coolify-db
    image: postgres:14-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=coolify
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=coolify
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coolify"]
      interval: 5s
      timeout: 5s
      retries: 5

  coolify-redis:
    container_name: coolify-redis
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  default:
    name: coolify-network

volumes:
  coolify-db-data:
  coolify-backups:
  coolify-logs:
  postgres_data:
  redis_data:
